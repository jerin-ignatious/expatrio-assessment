openapi: 3.0.1
info:
  title: Expatrio Jerin
  description: Open API spec for Expatrio
  contact:
    email: jerinignatious1998@gmail.com
  version: v1
paths:
  /expatrio/v1/users:
    get:
      tags:
        - users
      summary: returns a list of all users with a given role
      operationId: getAllUsers
      parameters:
        - $ref: "#/components/parameters/userRole"
      responses:
        "200":
          description: Successfully fetched all users with given role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllUsersResponse"
  /expatrio/v1/user/customer:
    post:
      tags:
        - users
      summary: Creates a user with role CUSTOMER
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerRequest"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAttributes"
    put:
      tags:
        - users
      summary: updates a user with role CUSTOMER
      operationId: updateCustomer
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCustomerRequest"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAttributes"
    delete:
      tags:
        - users
      summary: Deletes a user with role CUSTOMER
      operationId: deleteCustomer
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: User created successfully
components:
  parameters:
    userId:
      in: header
      name: x-user-id
      required: true
      schema:
        type: string
    userRole:
      in: query
      name: userRole
      required: true
      schema:
        $ref: "#/components/schemas/UserRoles"
  schemas:
    UserRoles:
      type: string
      enum:
        - ADMIN
        - CUSTOMER
    GetAllUsersResponse:
      type: object
      required:
        - userAttributes
      properties:
        userAttributes:
          type: array
          items:
            $ref: "#/components/schemas/UserAttributes"
    UserAttributes:
      type: object
      required:
        - userId
        - userRole
        - userName
        - phoneNumber
      properties:
        userId:
          type: string
        userRole:
          $ref: "#/components/schemas/UserRoles"
        userName:
          type: string
        phoneNumber:
          type: string
    CreateCustomerRequest:
      type: object
      required:
        - userName
        - phoneNumber
      properties:
        userName:
          type: string
        phoneNumber:
          type: string
    UpdateCustomerRequest:
      type: object
      required:
        - phoneNumber
      properties:
        phoneNumber:
          type: string
